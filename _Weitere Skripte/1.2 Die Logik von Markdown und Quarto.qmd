---
title: "Die Logik von Markdown und Quarto"
author: "Katharina Maubach & Patrick Zerrer"
toc: true
number-sections: true
highlight-style: pygments
format:
  html:
    code-fold: false
    code-line-numbers: true
execute: 
  echo: fenced
---

![Artwork by @allison_horst](Bilder/R%20Markdown%20Grafik.png)

Wir kÃ¶nnen in R-Studio unterschiedliche Arten von Dokumenten nutzen. In diesem Kurs nutzen wir hauptsÃ¤chlich [R Quarto](https://quarto.org/). Im folgenden Kapitel gehen wir auf die wichtigsten Funktionsweisen von Quarto ein.

::: {.callout-note collapse="true" icon="false"}
## Video

{{< video https://nc.uni-bremen.de/index.php/s/DJGAeBcNing9dQZ/download/%231%20Einf%C3%BChrung%20R.mp4 width="900" height="500">}}
:::

# R Markdown und Quarto

In diesem Kurs verwenden wir R Markdown bzw. R Quarto Dokumente. Diese haben den Vorteil, dass wir innerhalb eines Dokumentes Codeteile (sogenannte *Code Chunks*) und Text kombinieren kÃ¶nnen. Dies erlaubt die Dokumentation und Reproduzierbarkeit statistischer Auswertungen.

Bei [Quarto](https://quarto.org/) handelt es sich im Prinzip um die neuere Variante von RMarkdown Dokumenten. Diese beinhalten alle FunktionalitÃ¤ten von Markdown-Dokumenten (sind genauso aufgebaut und lassen sich normal rendern), aber bieten zusÃ¤tzlich die MÃ¶glichkeit weitere Programmiersprachen (wie Python, Julia und Javascript) und interaktive Elemente (Widgets und Shiny-Anwendungen). Markdown-Dokumente weisen die Endung `.rmd` auf wohingegen Quarto-Dokumente den Endung `.qmd` haben. Beide Dokumenttypen kÃ¶nnen fÃ¼r unseren Kurszweck gleichwertig genutzt werden. Lediglich bei der Arbeit mit interaktiven, multimedialen oder mehrsprachigen Dokumenten ist Quarto besser geeignet als Markdown.

# Installation der Programme

Markdown kann innerhalb von R mit dem Befehl `install.packages("Rmarkdown")` installiert und anschlieÃŸend geladen werden. Da es sich bei Quarto nicht um ein Package, sondern ein eigenes Interface handelt, muss das Programm extern [heruntergeladen](https://quarto.org/docs/get-started/) und auf dem Rechner installiert werden.

# Bestehende Dokument laden

Zum Laden eines Quarto- oder Markdown Dokumentes kÃ¶nnt ihr dieses einfach auf eurem Rechner doppelklicken. Wahlweise kÃ¶nnt ihr auch Ã¼ber File -\> Open File (oder Strg + O) innerhalb von RStudio ein Dokument Ã¶ffnen.

# Neue Dokumente anlegen

Um ein neues Dokument anzulegen, kÃ¶nnt ihr einfach Ã¼ber File -\> New File das gewÃ¼nschte Dokument anlegen. Sowohl bei Markdown, als auch bei Quarto Ã¶ffnet sich dann das Folgende Fenster:

![Neues Dokument anlegen](Bilder/NewDocument.jpg)

Dort kÃ¶nnt ihr euer Dokument benennen (*Title*), die Autoren festlegen (*Author*) sowie das Output-Format (*HTML, PDF oder WORD*) festlegen. Zudem kÃ¶nnt ihr bei Quarto angeben, wie ist das Dokument gerendert werden soll (*Knitr* vs. *Jupyter*). Hier kÃ¶nnt ihr die Auswahl auf Knitr belassen. Zuletzt kÃ¶nnt ihr festlegen, ob ihr den visual markdown editor oder den source editor nutzen mÃ¶chtet. All diese Punkte kÃ¶nnt ihr jedoch auch noch nachfolgend im [YAML-Header](###yaml-header) oder im [MenÃ¼](###Ã¼bergreifende_menÃ¼punkte)) Ã¤ndern.

# Ãœbergreifende MenÃ¼punkte

Unterhalb der allgemeinen RStudio-MenÃ¼leiste findet ihr eine eigene Markdown und Quarto-Dokumentleiste:

![DokumentmenÃ¼leistet](Bilder/QuartomenÃ¼.jpg)

Hier kÃ¶nnt ihr euer Dokument speichern (Diskettensymbol), in eurem Dokument suchen und ersetzen (Lupensymbol) oder euer Dokument Rendern (Quarto) oder Knitten (Markdown). Hiermit rendert ihr euer Dokument von R in euer gewÃ¼nschtes Outputformat (Word, Pdf, oder Html). ZusÃ¤tzlich kÃ¶nnt ihr mit dem Zahnrad Optionen fÃ¼r den Umgang mit dem gerenderten Dokument und den Codechunks festlegen. ZusÃ¤tzlich kÃ¶nnt ihr hier neue Codechunks anlegen (+C-Symbol auf der rechten Seite) oder die bestehenden Code-Chunks ausfÃ¼hren (Run-Symbol)

# Ãœberblick Ã¼ber die Dokumentkomponenten

Sowohl Markdown, als auch Quarto-Dokumente bestehen aus drei Bestandteilen: dem YAML-Header, Textbereichen und Codebereichen.

## YAML-Header

Innerhalb des YAML Headers, welcher jeweils von `---` umgeben ist, legen wir die Dokumentstruktur fest.

![YAML Header in einem Quarto Dokument](Bilder/YAMLHeader.jpg)

Dies beinhaltet beispielsweise den Titel des Dokumentes `title:`, die Autoren `author`, sowie Spezifikationen zur Dokumentstruktur, wie beispielsweise das Outputformat `format:` oder auch in Quarto Spezifikationen zum Umgang mit den Codechunks `execute: echo : true` auf Gesamtdokumentebene.

## Text

In Markdown und Quarto-Dokumenten kÃ¶nnen wir Text einbinden und diesen beliebig formatieren. Dazu kÃ¶nnen wir wahlweise die Source-Variante oder die Visual-Variante nutzen. In der Source-Variante variieren wir Text mittels Syntax. Typische Syntaxbefehle sind:

-   \**kursiv*\*: jeweils einen Stern vor und nach einem Wort um dieses kursiv zu schreiben
-   \*\***fett**\*\*: jeweils zwei Sterne vor und nach einem Wort um dieses fett zu schreiben
-   #: Rauten fÃ¼r Ãœberschriften, wobei eine Raute die erste Ãœberschrift signalisiert, zwei Rauten die zweite usw.
-   \![Bildunterschrift\](Link des Bildes): um Bilder einzufÃ¼gen
-   \[Linktext\](url): Um Links einzufÃ¼gen

MÃ¶chten wir Ã¼brigens die oben genutzten Symbole im Text nutzen, so kÃ¶nnen wir mit einem Â vor dem jeweiligen Symbol die Formatierung umgehen.

Wahlweise kÃ¶nnen wir auch den Visual-Modus nutzen, indem wir oben in der Dokumentleiste von `Source`auf `Visual` umstellen. In diesem Modus erhalten wir ein Word-Ã¤hnliches Interface und kÃ¶nnen Formatoptionen durch Klicken auf die jeweilige Formatierung umsetzen:

![Formatierungsoptionen im Visual Modus](Bilder/visualmode.jpg)

## Code Chunks

Innerhalb von Markdown und Quarto kÃ¶nnen wir Codebefehle direkt in unser Dokument innerhalb von sogenannten Codechunks integrieren. Hier kÃ¶nnen wir alle Arten von Code schreiben sowie diese mit Hilfe von `#` direkt kommentieren (alles hinter einer Raute wird dabei nicht ausgefÃ¼hrt). Codechunks beginnen mit drei Backticks und einem `r` in geschweiften Klammern und enden wieder mit drei Backticks:

```{r}

# Dies ist ein Code Chunk

```

Um die Codechunks zu erzeugen kÃ¶nnen wir einfach auf Code -\> Insert Codechunk gehen, auf das +C-Symbol in der DokumentmenÃ¼leiste oder den Shortcut `Alt + Strg + I` nutzen. Innerhalb der Chunks kÃ¶nnen wir Code schreiben und ausfÃ¼hren. Dies geschieht fÃ¼r eine einzelne Codezeile mit dem Shortcut `Strg + Enter` und fÃ¼r den gesamten Codechunk mit dem Shortcut `Strg + Shift + Enter`. Wahlweise kÃ¶nnt ihr auch den kleinen grÃ¼nen Pfeil in der rechten oberen Ecke des Chunks, Code -\> Run Selected Lines oder den Punkt Run in der Quarto-Dokumentleiste auswÃ¤hlen.

ZusÃ¤tzlich kÃ¶nnen wir hinter dem `{r}` angeben, wie R mit dem Code des Chunks umgehen soll. Wir kÃ¶nnen beispielsweise auswÃ¤hlen, ob R den Code ausfÃ¼hren soll (`eval = T/F`) ob der Codebereich in unserem Enddokument aufgefÃ¼hrt sein soll (`echo = T`) oder wir lediglich die Ergebnisse angezeigt wollen (`echo = F`) oder ob wir beispielsweise Warnungen (`warnings = T/F`) oder Messages (`message = T/F`) in unserem Output-Dokument wÃ¼nschen:

```{r, echo = T}

# Dies ist ein Code Chunk

```

Wahlweise kÃ¶nnen wir diese Optionen auch fÃ¼r das Gesamtdokument im YAML-Header festlegen. DafÃ¼r nutzen wir den Zusatz `execute:` und geben anschlieÃŸend alle unsere Dokumentoptionen (fÃ¼r einen Ãœberblick siehe [hier](https://quarto.org/docs/computations/execution-options.html)) an.

![Codeoptionen im Quarto Header](Bilder/YAMLOptions.jpg)

*Achtung*: wir nutzen hier `:` statt `=` und schreiben `true` und `false` statt `TRUE`/`T` und `FALSE`/`F`.

# Literatur

::: callout-note
## WeiterfÃ¼hrende Literatur

> ðŸ“– Gehrau, V., Maubach, K., & Fujarski, S. (2022). Einfache Datenauswertung mit R. [Link](https://link.springer.com/book/10.1007/978-3-658-34285-2)

> ðŸ“– Xie, Y., Allaire, J. J., & Grolemund, G. (2020). R markdown: The definitive guide. Chapman; Hall/CRC [Link](https://bookdown.org/yihui/rmarkdown)

> ðŸ“– Xie, Y., Dervieux, C., & Riederer, E. (2020). R markdown cookbook. Chapman and Hall/CRC [Link](https://bookdown.org/yihui/rmarkdown-cookbook/#ref-R-rmarkdown)

> ðŸ“– Allaire, J. J., Xie, Y., McPherson, J., Luraschi, J., Ushey, K., Atkins, A., Wickham, H., Cheng, J., Chang, W., & Iannone, R. (2020a). rmarkdown: Dynamic documents for r. [Link](https://github.com/rstudio/rmarkdown)
:::
