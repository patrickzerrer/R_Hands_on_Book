---
title: "Einf√ºhrung in R und RStudio"
author: "Katharina Maubach & Patrick Zerrer"
toc: true
number-sections: true
highlight-style: pygments
format:
  html:
    code-fold: false
    code-line-numbers: true
---

![Artwork by @allison_horst](Bilder/Grafik%20R%20Lernen.png)

In diesem Kurs nutzen wir die Programmiersprache R sowie R-Studio als benutzerfreundliche Programmoberfl√§che. In diesem Kapitel gehen wir die wichtigsten Punkte Schritt f√ºr Schritt durch.

::: {.callout-note collapse="true" icon="false"}
## Video

{{< video https://nc.uni-bremen.de/index.php/s/DJGAeBcNing9dQZ/download/%231%20Einf%C3%BChrung%20R.mp4 width="900" height="500">}}
:::

# Was ist R?

R ist eine freie Programmiersprache die auf allen g√§ngigen Betriebssystemen l√§uft. In seiner Grundfunktion ist R zun√§chst eine Konsole, in welcher wir zeilenweise Code eingeben und ausf√ºhren k√∂nnen. Dabei kann es sich um einfache Rechnungen oder auch komplexe Modelle handeln. Die meisten arbeiten dabei nicht mit R als solches sondern nutzen verschiedene Umgebungen, etwa RStudio oder Jupyter Hub um mit R zu arbeiten.

# Was ist RStudio?

RStudio ist eine Erweiterung von R und bietete den Nutzer\*innen eine benutzerfreundlichere Programmoberfl√§che. So erm√∂glicht RStudio einen direkten √úberblick √ºber die geladenen Pakete, Datens√§tze und im Arbeitsverzeichnis gespeicherten Dateien. Zudem erm√∂glicht RStudio die Arbeit mit Skripten, Markdown und Quarto Dokumenten.

# Installation von R und RStudio

M√∂chtet ihr das Programm lokal auf eurem Rechner nutzen, m√ºsst ihr zun√§chst die Programme R, RStudio und gegebenfalls RTools installieren. Alle Programme sind kostenlos online verf√ºgbar und lassen sich auf allen g√§ngigen Betriebssystemen installieren. Installiert zun√§chst [R](https://cran.uni-muenster.de/) und anschlie√üend [RStudio](https://posit.co/download/rstudio-desktop/) und achtet darauf regelm√§√üig auf die aktuelle Version zu aktualisieren.

Innerhalb unseres Kurse arbeiten wir mit R und RStudio, nutzen die Programme allerdings in der Umgebung von Jupyter.

# Die Programmoberfl√§che von RStudio

## Schaltfl√§chen

Innerhalb von RStudio unterscheiden wir 4 Schaltfl√§chen welche sich beliebig via Drag and Drop verschieben oder auch minimieren lassen.

![Bild Programmoberfl√§che](Bilder/RStudio_Programmoberfl√§che.jpg)

**1** Ist der Bereich in welchen wir Skripte, Markdown und Quarto-Dokumente bearbeiten und ausf√ºhren k√∂nnen (siehe auch Markdown und Quarto)

**2** Ist die Konsole. Dies ist der Bereich in welchem wir weiterhin oldschool R angezeigt bekommen. Dieser Bereich kann sehr hilfreich sein, wenn man kurz Befehle ben√∂tigt, welche nicht im Skript auftauchen sollen (beispielsweise eine kurze Hilfe zu Funktionen mittels `?`)

**3** In diesem Bereich findet sich alles zu den innerhalb von R geladenen Datens√§tzen. Unter Environment finden sich die Datens√§tze (*Data*), die Historie der genutzten Befehle (*History*), eine Schnittstelle zu Datenbanken (*Connection*) sowie R-interne Tutorials (*Tutorial*).

**4** In diesem Bereich finden sich verschiedene Reiter, welche die Organisation der Arbeit mit R erleichtern. Unter *File* befinden sich alle innerhalb des Ordners oder Projektes befindlichen Dateien. Unter *Plots* kann man sich die in R erstellten Grafiken anzeigen lassen. *Packages* zeigt alle in R installierten Pakete an. Hier lassen sich mittels *install* auch neue Pakete installieren oder √ºber *update* die aktuellen Pakete updaten. Bei *Help* k√∂nnen wir eine Hilfeseite aufrufen. Es kann wahlweise direkt innerhalb der Seite nach Hilfen gesucht werden oder mit dem Befehl `?Name der Funktion` bzw. `??Name des Packages` innerhalb der Konsole. M√∂chte man nach einem Befehl aus einem Paket suchen nutzt man den Suchbefehle`?Name des Packages::Name der Funktion`. Unter *Viewer* finden sich gerenderte Dokumente (beispielsweise ein gerendertes Markdown oder Quarto Dokument) und unter *Presentation* gerenderte Shiny-Dokumente.

## Men√ºleiste

Zus√§tzlich zu den Schaltfl√§chen findet sich oben links eine Men√ºleiste:

![Bild Men√ºleiste](Bilder/Men√ºleiste.jpg)

-   Unter *File* k√∂nnen neue Dateien erstellt, ge√∂ffnet und gespeichert werden.
-   *Edit* bietet M√∂glichkeiten der Dateibearbeitung (bspw. Kopieren, Ausschneiden, R√ºckg√§ngig etc.) falls ihr keine Short-Cuts nutzen wollt.
-   *Code* gibt eine √úbersicht √ºber Funktionen innerhalb des Markdown-Dokumentes (bspw. Codechunks einf√ºgen).
-   Unter *View* k√∂nnen die einzelnen Schaltfl√§chen und deren Aufteilung ge√§ndert werden. Wahlweise geht dies auch via Drag & Drop.
-   *Plots* vereinfacht den Umgang mit in r erstellten Grafiken. Wahlweise k√∂nnt ihr hier auch den Reiter Plots in Schaltfl√§che 4 nutzen.
-   *Session* hier kann eine R-Session neu gestartet oder beendet werden (siehe auch [1.6 Die Session](https://patrickzerrer.github.io/R_Hands_on_Book/Skript_1.4.html#die-session)).
-   *Build*, *Debug* und *Profile* beinhaltet Sonderanwendungen, wie beispielsweise das [Debugging von Funktionen](https://support.posit.co/hc/en-us/articles/200713843) oder Fragen nach der [Speed-Optimierung von R-Code](https://rstudio.github.io/profvis/).
-   *Tools* hat viele hilfreiche Funktionen. Hier k√∂nnen unter anderem Pakete installiert und hilfreiche Keyboard Shortcuts ausgegeben werden. Am bedeutsamsten ist hier jedoch der Bereich Global Options, in welchem unter anderem grundlegende Einstellungen zum Speicherort von R und den Paketen, zur Aufteilung und Aussehen von RStudio und zur Funktionalit√§t von R Markdown getroffen werden k√∂nnen.\
-   Auch der Reiter *Help* kann sehr hilfreich sein. Hier finden sich eine Hilfeseite (siehe auch Reiter Help in Schaltfl√§che 4), M√∂glichkeiten der besseren Zug√§nglichkeit (*Accessibility*), *Cheat Sheets* f√ºr die Arbeit mit R und erneut eine √úbersicht √ºber Shortcuts f√ºr die Arbeit mit R.

# Die Grundlogik von R

Wie bereits zuvor erw√§hnt ist R eine Programmiersprache. Das bedeutet, dass alle Schritte in R, vom Datenmanagement bis zu komplizierteren statistischen Analysen, mit Befehlen bzw. Funktionen erfolgen. Grunds√§tzlich funktionieren Befehle so, dass zun√§chst der Befehl erfolgt und in Klammern anschlie√üend worauf sich dieser Befehl bezieht.

Dabei k√∂nnen sich manche Befehle auf den gesamten Datensatz beziehen (etwa der Befehl `str` der die Struktur des Datensatzes anzeigt) oder auch jeweils nur auf einzelne Variablen (beispielsweise wenn wir den Mittelwert einer einzelnen Variablen des Datensatzes ermitteln wollen).

F√ºr den Befehl `str()` sieht die Code-Zeile bei einem Datensatz names `data` wie folgt aus:

```{r, eval=F, message=F, warning=F}
str(data)
```

F√ºr die Berechnung des Mittelwertes mit der Funktion `mean()` m√ºssen wir R ebenfalls den Datensatz nennen, auf welchen wir uns beziehen wollen (üí° Fun-Fact, R "denkt nicht mit", also auch wenn f√ºr euch klar ist, dass ihr doch die gesamte Zeit mit dem selben Datensatz arbeitet, muss R das immer wieder gesagt bekommen). Zus√§tzlich m√ºssen wir die Variable angeben, von welcher der Mittelwert berechnet werden soll. Datensatz und Variable k√∂nnen wir dabei mit einem Dollarzeichen `$` verbinden, dass sagt R, dass es sich um die Variable aus dem jeweiligen Datensatz handelt. M√∂chten wir nun den Mittelwert der Variablen `Alter` aus dem Datensatz `data` berechnen, sieht der Code wie folgt aus:

```{r, eval=F, message=F, warning=F}
mean(data$Alter)
```

Dabei haben die meisten Funktionen noch weitere Zusatzoptionen, welche wir nutzen k√∂nnen. Bei dem Befehl `mean` k√∂nnen wir beispielsweise angeben, ob fehlende Werte in die Berechnung mit einflie√üen sollen oder nicht. Dies geschieht mit den Zusatz `na.rm = TRUE` bzw. `na.rm = FALSE`. `Na.rm` steht in diesem Fall f√ºr NA (=not available, fehlende F√§lle) und remove (also entfernen), fragt demnach ob fehlende F√§lle aus der Berechnung ausgeschlossen werden sollen. Dabei ist die *default-Option*, also die Option die in dem Befehl voreingestellt ist, dass fehlende Werte nicht aus der Berechnung ausgeschlossen werden (`na.rm=F`). Die meisten Befehle haben bestimmte defaults, da dies diese den Normalfall der Nutzung beschreiben und uns beim Programmieren Schreibaufwand ersparen (m√∂chten wir die defaults nutzen, m√ºssen wir immerhin nichts zus√§tzliches in der Funktion angeben). Allerdings k√∂nnen wir hier auch immer die anderen Optionen nutzen, wir m√ºssen dies nur in unserem Befehl angeben:

```{r, eval=F, message=F, warning=F}
mean(data$Alter, na.rm=T)
```

Hier haben wir auch bereits eine weitere Funktionalit√§t von R kennengelernt, n√§mlich die Operationalisierung einzelner Parameter √ºber `T` (`TRUE`) und `F` (`FALSE`). Doch woher wei√ü ich nun als neuer Nutzer, welche Optionen mit bei einzelnen Befehlen zur Verf√ºgung stehen?

Hier hilf ein Blick in die Hilfeseite, welche wir beispielsweise f√ºr den Mittelwert mit dem Befehl `?mean()` aufrufen k√∂nnen. F√ºr jede Funktion stehen - wie oben bereits erw√§hnt - *Hilfeseiten* zur Verf√ºgung. Diese beinhalten zun√§chst eine kurze Beschreibung *Description*, anschlie√üend einen √úberblick zur Nutzung *Usage* sowie dem *Default* des Befehles. Anschlie√üend finden sich die *Arguments*, dies sind die M√∂glichkeiten, wie wir die Funktion nutzen k√∂nnen und welche zus√§tzlichen Optionen zur Verf√ºgung stehen. Oftmals finden sich zudem weitere Erkl√§rungen und Beispiele der Nutzung.

## Kurz-Exkurs: das tidyverse

In R selbst findet sich eine Vielzahl von Befehlen. Zus√§tzlich wird R von den Nutzern immer weiter entwickelt und es kommen neue Funktionen in Form von Paketen hinzu. Eines der meist genutzten Pakete(-universen) stellt dabei das [tidyverse](https://www.tidyverse.org/) dar. Mit den Befehlen und Funktionen dieses Paketes kommt eine etwas andere Programmiersprache, welche uns jedoch die Arbeit mit R erleichtert. Gerade auch bei Fragen des Datenmanagementes ist das tidyverse hilfreich, denn hier kommt ein zweiter Fun-Fact √ºber R:üí° R kann nicht nur manchmal etwas dumm sein (wir erinnern uns, es denkt nicht mit), es ist auch recht vergesslich. Wir haben oben bereits gelernt, dass wir in Befehlen immer den Datensatz und die Variable spezifizieren m√ºssen. Dies stellt kein Problem bei einzelnen Befehlen dar, ist jedoch bei einer Vielzahl von Befehlen etwas nervig. Hier kommt uns die tidyverse Logik zu Nutze, in welcher einmal zu Beginn des Dokumentes der Datensatz spezifziert wird und anschlie√üend alle weiteren Schritte durch eine Pipe `%>%` verbunden werden. Die Pipe (Shortcut Windows: Ctrl + Shift + M; MAC: Cmd + Shift + M) bedeutet so viel wie "und dann". Also im Prinzip sagen wir R, nehme diesen Datensatz und dann mache die folgenden Dinge, wobei wir so viele Schritte wie wir m√∂chten jeweils mit Pipes verbinden k√∂nnen. Wir nutzen in unseren Skripten haupts√§chlich die tidyverse-Logik, erkl√§ren diese daher grundlegender in Kapitel [3.1](https://patrickzerrer.github.io/R_Hands_on_Book/Skript_3.1.html), wenn wir uns mit den ersten Schritten des Datenmanagements besch√§ftigen.

# Pakete

R-Pakete sind Erweiterungen, die Funktionen, Daten, Code und dessen Dokumentation enthalten und uns damit unsere Arbeit deutlich erleichtern. Diese erweiteren die Funktionen, die bereits in der Standardausf√ºhrung von R (bekannt als base R) gegeben sind.

## Die Installation von Paketen

Pakete k√∂nnen wahlweise R-intern √ºber *CRAN* (das steht f√ºr *Comprehensive R Archive Network* und ist das zentrale Software-Repository) oder direkt von GitHub (f√ºr sehr neue Pakete, welche noch nicht auf CRAN sind) installiert werden. Im Normalfall installieren wir jedoch direkt von CRAN, da hier eine Vielzahl von Paketen und Funktionen vorhanden sind und die Installation sehr simpel ist.

Wenn wir ein R-Paket von CRAN installieren m√∂chten nutzen wir die Funktion `install.packages()`, in deren Klammer wir in Anf√ºhrungszeichen den Namen des zu installierenden Pakets setzen. F√ºr das Paket `tidyverse` w√§re der Befehl wie folgt:

```{r ,eval=F, message=F, warning=F}
install.packages("tidyverse")
```

Beim Ausf√ºhren des Codes gibt R in der Konsole Auskunft √ºber die verschiedenen Installationsschritte sowie √ºber den (Mis-)Erfolg der Installation. Alternativ k√∂nnt ihr auch √ºber das RStudio Interface Pakete installieren. Hierf√ºr geht ihr in der rechten unteren Ecke auf den Reiter `Packages` und w√§hlt den Buttion `Install` aus. In dem sich √∂ffnenen Fenster gebt ihr den Namen des von euch gew√ºnschten Pakets ein und best√§tigt die Anwendung wiederum mit `Install`.

![Screenshot RStudio](Bilder/Skript_1_4_Screenshot4.png)

Einige der Pakete, die wir im Rahmen des Kurses verwenden sind bereits in der R Cloud vorinstalliert und m√ºssen nicht mehr von euch eigenh√§ndig installiert werden. Grunds√§tzlich ist es jedoch immer ratsam, einmal zu checken, ob die Pakete in der aktuellen Version installiert sind, da ansonsten die Funktionen der Pakete nicht funktionieren k√∂nnen.

## Das Laden von Paketen

Im vorherigen Schritt haben wir bereits die von uns ben√∂tigten Pakete installiert, jetzt m√ºssen wir R nur noch sagen, dass wir diese Pakete f√ºr die aktuelle Session nutzen m√∂chten. Ihr k√∂nnt euch das so vorstellen, dass ihr die ben√∂tigten Pakete *aktiv* schaltet. Dies geschieht mit dem `library` Befehl (Achtung, hier ben√∂tigen wir im Gegensatz zum `install.packages` Befehl keine Anf√ºhrungszeichen):

```{r ,eval=F, message=F, warning=F}
library(tidyverse)
```

Wir nutzen in diesem Kurs wiederum `pacman`, um automatisch mehrere Pakete installieren und laden zu k√∂nnen. Daf√ºr installieren und laden wir einmalig das Paket `pacman` und k√∂nnen anschlie√üend mit der Funktion `p_load` die von euch in der Klammer angegebenen Pakete installieren und laden:

```{r , eval=F, message=F, warning=F}
if(!require("pacman")) {install.packages("pacman");library(pacman)}
p_load(tidyverse, ggplot2, haven, psych, psy, nFactors, htmlTable) 
```

Ansonsten habt ihr noch die M√∂glichkeit die Pakete h√§ndisch √ºber das R Studio Interface zu aktiveren, was ich pers√∂nlich ab einer gewissen Anzahl von ben√∂tigten Paketen eher nervig finde. Nichtsdestotrotz k√∂nnt ihr hierf√ºr in der rechten unteren Ecke des Interfaces auf den Reiter `Packages` gehen und in der unteren Liste das gew√ºnschte Paket durch das Setzen eines Hakens ausw√§hlen.

![Screenshot RStudio](Bilder/Skript_1_4_Screenshot5.png)

::: callout-note
## Weiterf√ºhrende Literatur

> üìñ Gehrau, V., Maubach, K., & Fujarski, S. (2022). Einfache Datenauswertung mit R. [Link](https://link.springer.com/book/10.1007/978-3-658-34285-2)

> üìñ Julia Niemann-Lenz (2021). R Kompendium f√ºr die kommunikationswissenschaftliche Statistik- und Datenanalyse-Ausbildung. [Link](https://xvariable.github.io/r_book/)
:::
